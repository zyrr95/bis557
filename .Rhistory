expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
View(Sigma)
formula = Sepal.Length ~ .
data = iris
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta
X
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
beta = solve((t(X) %*% X)) %*% t(X) %*% Y
clear
# fit a linear model
# description this funtion passes parameters to the lm function
# @param formula a formula
# @param data a data.frame
# @return An lm object
# fit = linear_model(sepal.length ~., iris)
# summary(fit)
# @export
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
beta = solve((t(X) %*% X)) %*% t(X) %*% Y
fitted = X %*% fit_linear_model$coefficients
result = list(coefficients = beta, residuals = )
return(beta)
}
linear_model(Sepal.Length ~ .,iris)
# fit a linear model
# description this funtion passes parameters to the lm function
# @param formula a formula
# @param data a data.frame
# @return An lm object
# fit = linear_model(sepal.length ~., iris)
# summary(fit)
# @export
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
beta = solve((t(X) %*% X)) %*% t(X) %*% Y
#fitted = X %*% fit_linear_model$coefficients
#result = list(coefficients = beta, residuals = )
return(beta)
}
linear_model(Sepal.Length ~ .,iris)
lm(Sepal.Length ~ .,data = iris)
formula = Sepal.Length ~ .
data = iris
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
formula = Sepal.Length ~ .
data = iris
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
} else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta
fitted = X %*% beta
fitted
residuals = Y - fitted
residuals
residuals = Y - fitted
residuals
lm(Sepal.Length~., data = iris)$residuals
data(lm_patho)
# fit a linear model
# description this funtion passes parameters to the lm function
# @param formula a formula
# @param data a data.frame
# @return An lm object
# fit = linear_model(sepal.length ~., iris)
# summary(fit)
# @export
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr(X,Y)
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms - terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
return(result)
}
linear_model(Sepal.Length ~ .,iris)
# fit a linear model
# description this funtion passes parameters to the lm function
# @param formula a formula
# @param data a data.frame
# @return An lm object
# fit = linear_model(sepal.length ~., iris)
# summary(fit)
# @export
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms - terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
return(result)
}
linear_model(Sepal.Length ~ .,iris)
# fit a linear model
# description this funtion passes parameters to the lm function
# @param formula a formula
# @param data a data.frame
# @return An lm object
# fit = linear_model(sepal.length ~., iris)
# summary(fit)
# @export
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms - terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
return(result)
}
linear_model(Sepal.Length ~ .,iris)
formula = Sepal.Length ~ .
data = iris
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
} else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
beta
fitted = X %*% beta
fitted
# fit a linear model
# description this funtion passes parameters to the lm function
# @param formula a formula
# @param data a data.frame
# @return An lm object
# fit = linear_model(sepal.length ~., iris)
# summary(fit)
# @export
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms - terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
return(result)
}
linear_model(Sepal.Length ~ .,iris)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
document()
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms - terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
# fit a linear model
# description this funtion passes parameters to the lm function
# @param formula a formula
# @param data a data.frame
# @return An lm object
# fit = linear_model(sepal.length ~., iris)
# summary(fit)
# @export
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms = terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
return(result)
}
linear_model(Sepal.Length ~ .,iris)
lm(Sepal.Length ~ .,data = iris)
# fit a linear model
# description this funtion passes parameters to the lm function
# @param formula a formula
# @param data a data.frame
# @return An lm object
# fit = linear_model(sepal.length ~., iris)
# summary(fit)
# @export
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula, data = data), terms = terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
return(result)
}
linear_model(Sepal.Length ~ .,iris)
# fit a linear model
# description this funtion passes parameters to the lm function
# @param formula a formula
# @param data a data.frame
# @return An lm object
# fit = linear_model(sepal.length ~., iris)
# summary(fit)
# @export
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms = terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
return(result)
}
linear_model(Sepal.Length ~ .,iris)
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
??lm_patho
test
testthat
test
library(devtools)
test
test()
document()
setwd(/Desktop)
setwd(Desktop/bis557)
setwd("Desktop/bis557")
document()
test()
#' Fit a linear model
#'
#' @description This function passes parameters to the lm function.
#' @param formula a formula
#' @param data a data.frame
#' @return An lm object
#' @importFrom stats lm
#' @examples
#' fit <- linear_model(Sepal.Length ~., iris)
#' summary(fit)
#' @export
linear_model <- function(formula, data) linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms = terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
broswer()
return(result)
}
linear_model(y~.,lm_patho)
load("~/Desktop/bis557/data/lm_patho.rda")
linear_model(y~.,lm_patho)
#'
#' @description This function passes parameters to the lm function.
#' @param formula a formula
#' @param data a data.frame
#' @return An lm object
#' @importFrom stats lm
#' @examples
#' fit <- linear_model(Sepal.Length ~., iris)
#' summary(fit)
#' @export
linear_model <- function(formula, data) linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms = terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
broswer()
return(result)
}
linear_model(y~.,lm_patho)
#' Fit a linear model
#'
#' @description This function passes parameters to the lm function.
#' @param formula a formula
#' @param data a data.frame
#' @return An lm object
#' @importFrom stats lm
#' @examples
#' fit <- linear_model(Sepal.Length ~., iris)
#' summary(fit)
#' @export
linear_model <- function(formula, data) linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms = terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
browser()
return(result)
}
linear_model(y~.,lm_patho)
print(linear_model(y~.,lm_patho))
#'
#' @description This function passes parameters to the lm function.
#' @param formula a formula
#' @param data a data.frame
#' @return An lm object
#' @importFrom stats lm
#' @examples
#' fit <- linear_model(Sepal.Length ~., iris)
#' summary(fit)
#' @export
linear_model <- function(formula, data) linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms = terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
browser()
return(result)
}
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(x), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms = terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
#browser()
return(result)
}
test()
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(X), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms = terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
#browser()
return(result)
}
test()
