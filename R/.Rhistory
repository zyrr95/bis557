library(devtools)
test()
linear_model = function(formula,data){
res = all.vars(formula)[1]
if( all.vars(formula)[-1] == '.'){
var = colnames(data)[colnames(data)!= res]
}
else{
var = all.vars(formula)[-1]
}
X = model.matrix(as.formula(paste("~", paste(var, collapse = " + "))), data = data)
Y = data[,res]
#beta = solve((t(X) %*% X)) %*% t(X) %*% Y
beta = qr.solve(X,Y)
beta[beta == 0] = NA
fitted = X %*% beta
residuals = Y - fitted
result = list(coefficients = beta, residuals = residuals, fitted.values = fitted, rank = ncol(X), weights = NULL, df.residual = nrow(X) - ncol(X), call = call('lm',formula), terms = terms(x = formula, data = data),contrasts = NA, xlelves = NA, offset = NA, y = Y, x = X, model = formula, na.action = NA, qr = qr(X))
class(result) = 'lm'
#browser()
return(result)
}
test()
document()
#' Fit a Ridge Regression model
#'
#' @description This function passes parameters to the ridge regression function.
#' @param form a formula
#' @param data a data.frame
#' @param lambda a penalty parameter
#' @return An ridge_reg object
#' @importFrom stats model.matrix
#' @examples
#' fit <- ridge_reg(Sepal.Length ~.,1, iris)
#' summary(fit)
#' @export
ridge_reg = function(form, lambda, data){
rownames(data) = NULL
m = model.matrix(form, data)
y = matrix(data[,as.character(form)[2]], ncol=1)
y = y[as.numeric(rownames(m)),, drop = FALSE]
svd_obj = svd(m)
U = svd_obj$u
V = svd_obj$v
svals = svd_obj$d
D = diag(svals / (svals^2 + lambda))
beta = V %*% D %*% t(U) %*% y
rownames(beta) = colnames(m)
ret = list(coefficients = beta, lambda = lambda, form=form)
class(ret) = "ridge_reg"
ret
}
check()
